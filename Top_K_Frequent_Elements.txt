Top K Frequent Elements
Solved 
Given an integer array nums and an integer k, return the k most frequent elements within the array.

The test cases are generated such that the answer is always unique.

You may return the output in any order.

Example 1:

Input: nums = [1,2,2,3,3,3], k = 2

Output: [2,3]
Example 2:

Input: nums = [7,7], k = 1

Output: [7]
Constraints:

1 <= nums.length <= 10^4.
-1000 <= nums[i] <= 1000
1 <= k <= number of distinct elements in nums.

Approach: Counting and Picking the Most Popular
Imagine you're running a popularity contest 🎤

✅ Step 1: Count how many fans each contestant has
Go through the list and count how often each number appears:

If it’s a new number, start its count at 1

If it already showed up, just increase its fan count

Now you’ve got a scoreboard:

Like:

3 got 3 votes

2 got 2 votes

1 got 1 vote

✅ Step 2: Find the top K winners 🏆
Now, repeat this K times:

Look for the number that has the highest vote count.

Add it to your winners list

Cross it off the scoreboard (so we don't pick it again)

Do this until you've picked K winners.

So if you need the top 2:

First pick: the one with most votes (e.g., 3)

Second pick: next highest (e.g., 2)

📦 Example:
Input:
nums = [1, 2, 2, 3, 3, 3], k = 2

Count:

1 → 1 vote

2 → 2 votes

3 → 3 votes

Top 2 frequent:

First: 3

Second: 2

Output:
[3, 2] ✅

💡 Summary:
You’re hosting a popularity contest:

First, count how many fans each number has

Then announce the top K winners

No need to worry about order — just who’s most liked

Perfect when you want to highlight the most common trends in a big list!

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        d1={}
        for i in nums:
            if(i not in d1):
                d1[i]=1
            else:
                d1[i]+=1
        l=[]
        #m=0
        #print(d1)
        while k > 0:
            m = max(d1.values())  
            keys_to_delete = [] 

            for i in d1:
                if d1[i] == m:
                    l.append(i)
                    keys_to_delete.append(i)
                    k -= 1
                    if k == 0:
                        break
            for key in keys_to_delete:
                del d1[key]  
        return l
