Remove Element
Solved 
You are given an integer array nums and an integer val. Your task is to remove all occurrences of val from nums in-place.

After removing all occurrences of val, return the number of remaining elements, say k, such that the first k elements of nums do not contain val.

Note:

The order of the elements which are not equal to val does not matter.
It is not necessary to consider elements beyond the first k positions of the array.
To be accepted, the first k elements of nums must contain only elements not equal to val.
Return k as the final result.

Example 1:

Input: nums = [1,1,2,3,4], val = 1

Output: [2,3,4]
Explanation: You should return k = 3 as we have 3 elements which are not equal to val = 1.

Example 2:

Input: nums = [0,1,2,2,3,0,4,2], val = 2

Output: [0,1,3,0,4]
Explanation: You should return k = 5 as we have 5 elements which are not equal to val = 2.

Constraints:

0 <= nums.length <= 100
0 <= nums[i] <= 50
0 <= val <= 100
🎯 Goal:
You’re cleaning a basket of fruit 🍎🍌🍊, and you've been told to remove all the bad apples 🍎 (say, fruit with a certain color or mark — that's your val).

But… you don’t have another basket. So you have to clean it in place, shifting good fruit to the front of the same basket.

🧠 Approach: Two Hands, Smart Shifting
Imagine you're going through the basket with two fingers — let’s call them Left and Right:

🪜 Step-by-step:
Start both fingers at the beginning of the basket.

Now you move your fingers like this:

If both Left and Right are pointing at a bad fruit (🍎), move Right ahead to find the next good fruit. (Bad + Bad = move forward)

If Left is on a bad fruit, but Right found a good fruit, you swap them. Now a good fruit is placed earlier, and you move both fingers ahead.

If Left is already on a good fruit, you don’t need to do anything — move both fingers ahead.

Every time you successfully keep or move a good fruit to the front, you're building a “clean basket” at the start.

✅ Example:
Basket: [1, 1, 2, 3, 4] and you want to remove 1 (bad apples 🍎)

You scan and shift:

1 & 1 → skip

1 & 2 → swap → [2, 1, 1, 3, 4]

move on, 1 & 3 → swap → [2, 3, 1, 1, 4]

then 1 & 4 → swap → [2, 3, 4, 1, 1]

The front of the basket is now cleaned: [2, 3, 4]
You return k = 3, the number of good fruits kept.



class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        sz=len(nums)
        k=len(nums)
        l,r,=0,0
        while(r<sz):
            if(nums[l]==val and nums[r]==val):
                r+=1
                k-=1
            elif(nums[l]==val and nums[r]!=val):
                nums[l],nums[r]=nums[r],nums[l]
                l+=1
                r+=1
            else:
                l+=1
                r+=1
        return k

        
